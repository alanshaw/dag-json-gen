// Code generated by github.com/alanshaw/dag-json-gen. DO NOT EDIT.

package testing

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"math"
	"sort"

	jsg "github.com/alanshaw/dag-json-gen"
	cid "github.com/ipfs/go-cid"
)

var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *LongString) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Val (string) (string)
	if len(t.Val) > 10000 {
		return fmt.Errorf("Value in field t.Val was too long")
	}

	{
		buf, err := json.Marshal(t.Val)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *LongString) UnmarshalCBOR(r io.Reader) (err error) {
	*t = LongString{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 1 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Val (string) (string)

	{
		sval, err := cbg.ReadStringWithMax(cr, 10000)
		if err != nil {
			return err
		}

		t.Val = string(sval)
	}
	return nil
}
