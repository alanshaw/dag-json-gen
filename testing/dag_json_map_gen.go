// Code generated by github.com/alanshaw/dag-json-gen. DO NOT EDIT.

package testing

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"math"
	"sort"

	jsg "github.com/alanshaw/dag-json-gen"
	cid "github.com/ipfs/go-cid"
)

var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *SimpleTypeTree) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Dog (string) (string)
	if len("Dog") > 8192 {
		return fmt.Errorf("Value in field \"Dog\" was too long")
	}

	{
		buf, err := json.Marshal("Dog")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Dog) > 8192 {
		return fmt.Errorf("Value in field t.Dog was too long")
	}

	{
		buf, err := json.Marshal(t.Dog)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Test ([][]uint8) (slice)
	if len("Test") > 8192 {
		return fmt.Errorf("Value in field \"Test\" was too long")
	}

	{
		buf, err := json.Marshal("Test")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Test) > 8192 {
		return fmt.Errorf("Slice value in field t.Test was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Test {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if len(v) > 2097152 {
			return fmt.Errorf("Byte array in field v was too long")
		}

		if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
			return err
		}
		if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(v))); err != nil {
			return err
		}
		if _, err := w.Write([]byte("\"}")); err != nil {
			return err
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Stuff (testing.SimpleTypeTree) (struct)
	if len("Stuff") > 8192 {
		return fmt.Errorf("Value in field \"Stuff\" was too long")
	}

	{
		buf, err := json.Marshal("Stuff")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if err := t.Stuff.MarshalDagJSON(w); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Others ([]uint64) (slice)
	if len("Others") > 8192 {
		return fmt.Errorf("Value in field \"Others\" was too long")
	}

	{
		buf, err := json.Marshal("Others")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Others) > 8192 {
		return fmt.Errorf("Slice value in field t.Others was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Others {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Stufff (testing.SimpleTypeTwo) (struct)
	if len("Stufff") > 8192 {
		return fmt.Errorf("Value in field \"Stufff\" was too long")
	}

	{
		buf, err := json.Marshal("Stufff")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if err := t.Stufff.MarshalDagJSON(w); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.BoolPtr (bool) (bool)
	if len("BoolPtr") > 8192 {
		return fmt.Errorf("Value in field \"BoolPtr\" was too long")
	}

	{
		buf, err := json.Marshal("BoolPtr")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if t.BoolPtr == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		if *t.BoolPtr {
			if _, err := w.Write([]byte("true")); err != nil {
				return err
			}
		} else {
			if _, err := w.Write([]byte("false")); err != nil {
				return err
			}
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NotPizza (uint64) (uint64)
	if len("NotPizza") > 8192 {
		return fmt.Errorf("Value in field \"NotPizza\" was too long")
	}

	{
		buf, err := json.Marshal("NotPizza")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}

	if t.NotPizza == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		buf, err := json.Marshal(*t.NotPizza)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.StringPtr (string) (string)
	if len("StringPtr") > 8192 {
		return fmt.Errorf("Value in field \"StringPtr\" was too long")
	}

	{
		buf, err := json.Marshal("StringPtr")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if t.StringPtr == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		if len(*t.StringPtr) > 8192 {
			return fmt.Errorf("Value in field t.StringPtr was too long")
		}

		buf, err := json.Marshal(*t.StringPtr)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.SixtyThreeBitIntegerWithASignBit (int64) (int64)
	if len("SixtyThreeBitIntegerWithASignBit") > 8192 {
		return fmt.Errorf("Value in field \"SixtyThreeBitIntegerWithASignBit\" was too long")
	}

	{
		buf, err := json.Marshal("SixtyThreeBitIntegerWithASignBit")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		buf, err := json.Marshal(t.SixtyThreeBitIntegerWithASignBit)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	return nil
}

func (t *SimpleTypeTree) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SimpleTypeTree{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SimpleTypeTree: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 32)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Dog (string) (string)
		case "Dog":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Dog = string(sval)
			} // t.Test ([][]uint8) (slice)
		case "Test":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Test: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Test = make([][]uint8, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					maj, extra, err = cr.ReadHeader()
					if err != nil {
						return err
					}

					if extra > 2097152 {
						return fmt.Errorf("t.Test[i]: byte array too large (%d)", extra)
					}
					if maj != cbg.MajByteString {
						return fmt.Errorf("expected byte array")
					}

					if extra > 0 {
						t.Test[i] = make([]uint8, extra)
					}

					if _, err := io.ReadFull(cr, t.Test[i]); err != nil {
						return err
					}

				}
			}
			// t.Stuff (testing.SimpleTypeTree) (struct)
		case "Stuff":

			{

				null, err := jr.PeekNull()
				if err != nil {
					return err
				}
				if null {
					if err := jr.ReadNull(); err != nil {
						return err
					}
				} else {
					t.Stuff = new(SimpleTypeTree)
					if err := t.Stuff.UnmarshalCBOR(jr); err != nil {
						return fmt.Errorf("unmarshaling t.Stuff pointer: %w", err)
					}
				}

			} // t.Others ([]uint64) (slice)
		case "Others":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Others: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Others = make([]uint64, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						nval, err := jr.ReadNumberAsUint64()
						if err != nil {
							return err
						}
						t.Others[i] = uint64(nval)

					}

				}
			}
			// t.Stufff (testing.SimpleTypeTwo) (struct)
		case "Stufff":

			{

				null, err := jr.PeekNull()
				if err != nil {
					return err
				}
				if null {
					if err := jr.ReadNull(); err != nil {
						return err
					}
				} else {
					t.Stufff = new(SimpleTypeTwo)
					if err := t.Stufff.UnmarshalCBOR(jr); err != nil {
						return fmt.Errorf("unmarshaling t.Stufff pointer: %w", err)
					}
				}

			} // t.BoolPtr (bool) (bool)
		case "BoolPtr":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					maj, extra, err = cr.ReadHeader()
					if err != nil {
						return err
					}
					if maj != cbg.MajOther {
						return fmt.Errorf("booleans must be major type 7")
					}

					var val bool
					switch extra {
					case 20:
						val = false
					case 21:
						val = true
					default:
						return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
					}
					t.BoolPtr = &val
				}
			}
			// t.NotPizza (uint64) (uint64)
		case "NotPizza":

			{

				nval, err := jr.ReadNumberAsUint64OrNull()
				if err != nil {
					return err
				}
				if nval != nil {
					typed := uint64(*nval)
					t.NotPizza = &typed
				}

			} // t.StringPtr (string) (string)
		case "StringPtr":

			{
				sval, err := jr.ReadStringOrNull(8192)
				if err != nil {
					return err
				}
				if s != nil {
					t.StringPtr = (*string)(sval)
				}
			} // t.SixtyThreeBitIntegerWithASignBit (int64) (int64)
		case "SixtyThreeBitIntegerWithASignBit":

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.SixtyThreeBitIntegerWithASignBit = int64(nval)

			}
		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *NeedScratchForMap) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Thing (bool) (bool)
	if len("Thing") > 8192 {
		return fmt.Errorf("Value in field \"Thing\" was too long")
	}

	{
		buf, err := json.Marshal("Thing")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if t.Thing {
		if _, err := w.Write([]byte("true")); err != nil {
			return err
		}
	} else {
		if _, err := w.Write([]byte("false")); err != nil {
			return err
		}
	}
	return nil
}

func (t *NeedScratchForMap) UnmarshalCBOR(r io.Reader) (err error) {
	*t = NeedScratchForMap{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("NeedScratchForMap: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 5)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Thing (bool) (bool)
		case "Thing":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Thing = false
			case 21:
				t.Thing = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *SimpleStructV1) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.OldMap (map[string]testing.SimpleTypeOne) (map)
	if len("OldMap") > 8192 {
		return fmt.Errorf("Value in field \"OldMap\" was too long")
	}

	{
		buf, err := json.Marshal("OldMap")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		if len(t.OldMap) > 4096 {
			return fmt.Errorf("cannot marshal t.OldMap map too large")
		}

		if _, err := w.Write([]byte("{")); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.OldMap))
		for k := range t.OldMap {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for i, k := range keys {
			if i > 0 {
				if _, err := w.Write([]byte(",")); err != nil {
					return err
				}
			}
			v := t.OldMap[k]
			if len(k) > 8192 {
				return fmt.Errorf("Value in field k was too long")
			}

			{
				buf, err := json.Marshal(k)
				if err != nil {
					return err
				}
				if _, err := w.Write(buf); err != nil {
					return err
				}
			}

			if _, err := w.Write([]byte(":")); err != nil {
				return err
			}

			if err := v.MarshalDagJSON(w); err != nil {
				return err
			}

		}
		if _, err := w.Write([]byte("}")); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldNum (uint64) (uint64)
	if len("OldNum") > 8192 {
		return fmt.Errorf("Value in field \"OldNum\" was too long")
	}

	{
		buf, err := json.Marshal("OldNum")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}

	{
		buf, err := json.Marshal(t.OldNum)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldPtr (cid.Cid) (struct)
	if len("OldPtr") > 8192 {
		return fmt.Errorf("Value in field \"OldPtr\" was too long")
	}

	{
		buf, err := json.Marshal("OldPtr")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}

	if t.OldPtr == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		if _, err := w.Write([]byte(fmt.Sprintf("{\"/\":\"%s\"}", *t.OldPtr))); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldStr (string) (string)
	if len("OldStr") > 8192 {
		return fmt.Errorf("Value in field \"OldStr\" was too long")
	}

	{
		buf, err := json.Marshal("OldStr")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.OldStr) > 8192 {
		return fmt.Errorf("Value in field t.OldStr was too long")
	}

	{
		buf, err := json.Marshal(t.OldStr)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldArray ([]testing.SimpleTypeOne) (slice)
	if len("OldArray") > 8192 {
		return fmt.Errorf("Value in field \"OldArray\" was too long")
	}

	{
		buf, err := json.Marshal("OldArray")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.OldArray) > 8192 {
		return fmt.Errorf("Slice value in field t.OldArray was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.OldArray {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if err := v.MarshalDagJSON(w); err != nil {
			return err
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldBytes ([]uint8) (slice)
	if len("OldBytes") > 8192 {
		return fmt.Errorf("Value in field \"OldBytes\" was too long")
	}

	{
		buf, err := json.Marshal("OldBytes")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.OldBytes) > 2097152 {
		return fmt.Errorf("Byte array in field t.OldBytes was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.OldBytes))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldStruct (testing.SimpleTypeOne) (struct)
	if len("OldStruct") > 8192 {
		return fmt.Errorf("Value in field \"OldStruct\" was too long")
	}

	{
		buf, err := json.Marshal("OldStruct")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if err := t.OldStruct.MarshalDagJSON(w); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldCidArray ([]cid.Cid) (slice)
	if len("OldCidArray") > 8192 {
		return fmt.Errorf("Value in field \"OldCidArray\" was too long")
	}

	{
		buf, err := json.Marshal("OldCidArray")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.OldCidArray) > 8192 {
		return fmt.Errorf("Slice value in field t.OldCidArray was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.OldCidArray {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		if _, err := w.Write([]byte(fmt.Sprintf("{\"/\":\"%s\"}", v))); err != nil {
			return err
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldCidPtrArray ([]*cid.Cid) (slice)
	if len("OldCidPtrArray") > 8192 {
		return fmt.Errorf("Value in field \"OldCidPtrArray\" was too long")
	}

	{
		buf, err := json.Marshal("OldCidPtrArray")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.OldCidPtrArray) > 8192 {
		return fmt.Errorf("Slice value in field t.OldCidPtrArray was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.OldCidPtrArray {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		if v == nil {
			if _, err := w.Write([]byte("null")); err != nil {
				return err
			}
		} else {
			if _, err := w.Write([]byte(fmt.Sprintf("{\"/\":\"%s\"}", *v))); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *SimpleStructV1) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SimpleStructV1{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SimpleStructV1: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 14)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.OldMap (map[string]testing.SimpleTypeOne) (map)
		case "OldMap":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajMap {
				return fmt.Errorf("expected a map (major type 5)")
			}
			if extra > 4096 {
				return fmt.Errorf("t.OldMap: map too large")
			}

			t.OldMap = make(map[string]SimpleTypeOne, extra)

			for i, l := 0, int(extra); i < l; i++ {

				var k string

				{
					sval, err := jr.ReadString(8192)
					if err != nil {
						return err
					}
					k = string(sval)
				}
				var v SimpleTypeOne

				{

					if err := v.UnmarshalCBOR(jr); err != nil {
						return fmt.Errorf("unmarshaling v: %w", err)
					}

				}
				t.OldMap[k] = v

			}
			// t.OldNum (uint64) (uint64)
		case "OldNum":

			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return err
				}
				t.OldNum = uint64(nval)

			} // t.OldPtr (cid.Cid) (struct)
		case "OldPtr":

			{

				c, err := jr.ReadCidOrNull()
				if err != nil {
					return err
				}
				t.OldPtr = *c

			} // t.OldStr (string) (string)
		case "OldStr":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.OldStr = string(sval)
			} // t.OldArray ([]testing.SimpleTypeOne) (slice)
		case "OldArray":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.OldArray: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.OldArray = make([]SimpleTypeOne, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						if err := t.OldArray[i].UnmarshalCBOR(jr); err != nil {
							return fmt.Errorf("unmarshaling t.OldArray[i]: %w", err)
						}

					}

				}
			}
			// t.OldBytes ([]uint8) (slice)
		case "OldBytes":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.OldBytes: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.OldBytes = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.OldBytes); err != nil {
				return err
			}

			// t.OldStruct (testing.SimpleTypeOne) (struct)
		case "OldStruct":

			{

				if err := t.OldStruct.UnmarshalCBOR(jr); err != nil {
					return fmt.Errorf("unmarshaling t.OldStruct: %w", err)
				}

			} // t.OldCidArray ([]cid.Cid) (slice)
		case "OldCidArray":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.OldCidArray: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.OldCidArray = make([]cid.Cid, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						c, err := jr.ReadCid()
						if err != nil {
							return err
						}
						t.OldCidArray[i] = c

					}

				}
			}
			// t.OldCidPtrArray ([]*cid.Cid) (slice)
		case "OldCidPtrArray":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.OldCidPtrArray: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.OldCidPtrArray = make([]*cid.Cid, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						c, err := jr.ReadCidOrNull()
						if err != nil {
							return err
						}
						t.OldCidPtrArray[i] = *c

					}

				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *SimpleStructV2) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.NewMap (map[string]testing.SimpleTypeOne) (map)
	if len("NewMap") > 8192 {
		return fmt.Errorf("Value in field \"NewMap\" was too long")
	}

	{
		buf, err := json.Marshal("NewMap")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		if len(t.NewMap) > 4096 {
			return fmt.Errorf("cannot marshal t.NewMap map too large")
		}

		if _, err := w.Write([]byte("{")); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.NewMap))
		for k := range t.NewMap {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for i, k := range keys {
			if i > 0 {
				if _, err := w.Write([]byte(",")); err != nil {
					return err
				}
			}
			v := t.NewMap[k]
			if len(k) > 8192 {
				return fmt.Errorf("Value in field k was too long")
			}

			{
				buf, err := json.Marshal(k)
				if err != nil {
					return err
				}
				if _, err := w.Write(buf); err != nil {
					return err
				}
			}

			if _, err := w.Write([]byte(":")); err != nil {
				return err
			}

			if err := v.MarshalDagJSON(w); err != nil {
				return err
			}

		}
		if _, err := w.Write([]byte("}")); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NewNum (uint64) (uint64)
	if len("NewNum") > 8192 {
		return fmt.Errorf("Value in field \"NewNum\" was too long")
	}

	{
		buf, err := json.Marshal("NewNum")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}

	{
		buf, err := json.Marshal(t.NewNum)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NewPtr (cid.Cid) (struct)
	if len("NewPtr") > 8192 {
		return fmt.Errorf("Value in field \"NewPtr\" was too long")
	}

	{
		buf, err := json.Marshal("NewPtr")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}

	if t.NewPtr == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		if _, err := w.Write([]byte(fmt.Sprintf("{\"/\":\"%s\"}", *t.NewPtr))); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NewStr (string) (string)
	if len("NewStr") > 8192 {
		return fmt.Errorf("Value in field \"NewStr\" was too long")
	}

	{
		buf, err := json.Marshal("NewStr")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.NewStr) > 8192 {
		return fmt.Errorf("Value in field t.NewStr was too long")
	}

	{
		buf, err := json.Marshal(t.NewStr)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldMap (map[string]testing.SimpleTypeOne) (map)
	if len("OldMap") > 8192 {
		return fmt.Errorf("Value in field \"OldMap\" was too long")
	}

	{
		buf, err := json.Marshal("OldMap")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		if len(t.OldMap) > 4096 {
			return fmt.Errorf("cannot marshal t.OldMap map too large")
		}

		if _, err := w.Write([]byte("{")); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.OldMap))
		for k := range t.OldMap {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for i, k := range keys {
			if i > 0 {
				if _, err := w.Write([]byte(",")); err != nil {
					return err
				}
			}
			v := t.OldMap[k]
			if len(k) > 8192 {
				return fmt.Errorf("Value in field k was too long")
			}

			{
				buf, err := json.Marshal(k)
				if err != nil {
					return err
				}
				if _, err := w.Write(buf); err != nil {
					return err
				}
			}

			if _, err := w.Write([]byte(":")); err != nil {
				return err
			}

			if err := v.MarshalDagJSON(w); err != nil {
				return err
			}

		}
		if _, err := w.Write([]byte("}")); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldNum (uint64) (uint64)
	if len("OldNum") > 8192 {
		return fmt.Errorf("Value in field \"OldNum\" was too long")
	}

	{
		buf, err := json.Marshal("OldNum")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}

	{
		buf, err := json.Marshal(t.OldNum)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldPtr (cid.Cid) (struct)
	if len("OldPtr") > 8192 {
		return fmt.Errorf("Value in field \"OldPtr\" was too long")
	}

	{
		buf, err := json.Marshal("OldPtr")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}

	if t.OldPtr == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		if _, err := w.Write([]byte(fmt.Sprintf("{\"/\":\"%s\"}", *t.OldPtr))); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldStr (string) (string)
	if len("OldStr") > 8192 {
		return fmt.Errorf("Value in field \"OldStr\" was too long")
	}

	{
		buf, err := json.Marshal("OldStr")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.OldStr) > 8192 {
		return fmt.Errorf("Value in field t.OldStr was too long")
	}

	{
		buf, err := json.Marshal(t.OldStr)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NewArray ([]testing.SimpleTypeOne) (slice)
	if len("NewArray") > 8192 {
		return fmt.Errorf("Value in field \"NewArray\" was too long")
	}

	{
		buf, err := json.Marshal("NewArray")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.NewArray) > 8192 {
		return fmt.Errorf("Slice value in field t.NewArray was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.NewArray {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if err := v.MarshalDagJSON(w); err != nil {
			return err
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NewBytes ([]uint8) (slice)
	if len("NewBytes") > 8192 {
		return fmt.Errorf("Value in field \"NewBytes\" was too long")
	}

	{
		buf, err := json.Marshal("NewBytes")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.NewBytes) > 2097152 {
		return fmt.Errorf("Byte array in field t.NewBytes was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.NewBytes))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldArray ([]testing.SimpleTypeOne) (slice)
	if len("OldArray") > 8192 {
		return fmt.Errorf("Value in field \"OldArray\" was too long")
	}

	{
		buf, err := json.Marshal("OldArray")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.OldArray) > 8192 {
		return fmt.Errorf("Slice value in field t.OldArray was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.OldArray {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if err := v.MarshalDagJSON(w); err != nil {
			return err
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldBytes ([]uint8) (slice)
	if len("OldBytes") > 8192 {
		return fmt.Errorf("Value in field \"OldBytes\" was too long")
	}

	{
		buf, err := json.Marshal("OldBytes")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.OldBytes) > 2097152 {
		return fmt.Errorf("Byte array in field t.OldBytes was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.OldBytes))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NewStruct (testing.SimpleTypeOne) (struct)
	if len("NewStruct") > 8192 {
		return fmt.Errorf("Value in field \"NewStruct\" was too long")
	}

	{
		buf, err := json.Marshal("NewStruct")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if err := t.NewStruct.MarshalDagJSON(w); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.OldStruct (testing.SimpleTypeOne) (struct)
	if len("OldStruct") > 8192 {
		return fmt.Errorf("Value in field \"OldStruct\" was too long")
	}

	{
		buf, err := json.Marshal("OldStruct")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if err := t.OldStruct.MarshalDagJSON(w); err != nil {
		return err
	}
	return nil
}

func (t *SimpleStructV2) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SimpleStructV2{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SimpleStructV2: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 9)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.NewMap (map[string]testing.SimpleTypeOne) (map)
		case "NewMap":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajMap {
				return fmt.Errorf("expected a map (major type 5)")
			}
			if extra > 4096 {
				return fmt.Errorf("t.NewMap: map too large")
			}

			t.NewMap = make(map[string]SimpleTypeOne, extra)

			for i, l := 0, int(extra); i < l; i++ {

				var k string

				{
					sval, err := jr.ReadString(8192)
					if err != nil {
						return err
					}
					k = string(sval)
				}
				var v SimpleTypeOne

				{

					if err := v.UnmarshalCBOR(jr); err != nil {
						return fmt.Errorf("unmarshaling v: %w", err)
					}

				}
				t.NewMap[k] = v

			}
			// t.NewNum (uint64) (uint64)
		case "NewNum":

			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return err
				}
				t.NewNum = uint64(nval)

			} // t.NewPtr (cid.Cid) (struct)
		case "NewPtr":

			{

				c, err := jr.ReadCidOrNull()
				if err != nil {
					return err
				}
				t.NewPtr = *c

			} // t.NewStr (string) (string)
		case "NewStr":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.NewStr = string(sval)
			} // t.OldMap (map[string]testing.SimpleTypeOne) (map)
		case "OldMap":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajMap {
				return fmt.Errorf("expected a map (major type 5)")
			}
			if extra > 4096 {
				return fmt.Errorf("t.OldMap: map too large")
			}

			t.OldMap = make(map[string]SimpleTypeOne, extra)

			for i, l := 0, int(extra); i < l; i++ {

				var k string

				{
					sval, err := jr.ReadString(8192)
					if err != nil {
						return err
					}
					k = string(sval)
				}
				var v SimpleTypeOne

				{

					if err := v.UnmarshalCBOR(jr); err != nil {
						return fmt.Errorf("unmarshaling v: %w", err)
					}

				}
				t.OldMap[k] = v

			}
			// t.OldNum (uint64) (uint64)
		case "OldNum":

			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return err
				}
				t.OldNum = uint64(nval)

			} // t.OldPtr (cid.Cid) (struct)
		case "OldPtr":

			{

				c, err := jr.ReadCidOrNull()
				if err != nil {
					return err
				}
				t.OldPtr = *c

			} // t.OldStr (string) (string)
		case "OldStr":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.OldStr = string(sval)
			} // t.NewArray ([]testing.SimpleTypeOne) (slice)
		case "NewArray":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.NewArray: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.NewArray = make([]SimpleTypeOne, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						if err := t.NewArray[i].UnmarshalCBOR(jr); err != nil {
							return fmt.Errorf("unmarshaling t.NewArray[i]: %w", err)
						}

					}

				}
			}
			// t.NewBytes ([]uint8) (slice)
		case "NewBytes":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.NewBytes: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.NewBytes = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.NewBytes); err != nil {
				return err
			}

			// t.OldArray ([]testing.SimpleTypeOne) (slice)
		case "OldArray":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.OldArray: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.OldArray = make([]SimpleTypeOne, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						if err := t.OldArray[i].UnmarshalCBOR(jr); err != nil {
							return fmt.Errorf("unmarshaling t.OldArray[i]: %w", err)
						}

					}

				}
			}
			// t.OldBytes ([]uint8) (slice)
		case "OldBytes":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.OldBytes: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.OldBytes = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.OldBytes); err != nil {
				return err
			}

			// t.NewStruct (testing.SimpleTypeOne) (struct)
		case "NewStruct":

			{

				if err := t.NewStruct.UnmarshalCBOR(jr); err != nil {
					return fmt.Errorf("unmarshaling t.NewStruct: %w", err)
				}

			} // t.OldStruct (testing.SimpleTypeOne) (struct)
		case "OldStruct":

			{

				if err := t.OldStruct.UnmarshalCBOR(jr); err != nil {
					return fmt.Errorf("unmarshaling t.OldStruct: %w", err)
				}

			}
		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *RenamedFields) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Bar (string) (string)
	if len("Bar") > 8192 {
		return fmt.Errorf("Value in field \"Bar\" was too long")
	}

	{
		buf, err := json.Marshal("Bar")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Bar) > 8192 {
		return fmt.Errorf("Value in field t.Bar was too long")
	}

	{
		buf, err := json.Marshal(t.Bar)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Foo (int64) (int64)
	if len("Foo") > 8192 {
		return fmt.Errorf("Value in field \"Foo\" was too long")
	}

	{
		buf, err := json.Marshal("Foo")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		buf, err := json.Marshal(t.Foo)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	return nil
}

func (t *RenamedFields) UnmarshalCBOR(r io.Reader) (err error) {
	*t = RenamedFields{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("RenamedFields: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 3)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Bar (string) (string)
		case "Bar":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Bar = string(sval)
			} // t.Foo (int64) (int64)
		case "Foo":

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Foo = int64(nval)

			}
		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *TestEmpty) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Cat (int64) (int64)
	if len("Cat") > 8192 {
		return fmt.Errorf("Value in field \"Cat\" was too long")
	}

	{
		buf, err := json.Marshal("Cat")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		buf, err := json.Marshal(t.Cat)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Foo (string) (string)
	if len("Foo") > 8192 {
		return fmt.Errorf("Value in field \"Foo\" was too long")
	}

	{
		buf, err := json.Marshal("Foo")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if t.Foo == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		if len(*t.Foo) > 8192 {
			return fmt.Errorf("Value in field t.Foo was too long")
		}

		buf, err := json.Marshal(*t.Foo)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Beep (string) (string)
	if len("Beep") > 8192 {
		return fmt.Errorf("Value in field \"Beep\" was too long")
	}

	{
		buf, err := json.Marshal("Beep")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Beep) > 8192 {
		return fmt.Errorf("Value in field t.Beep was too long")
	}

	{
		buf, err := json.Marshal(t.Beep)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}
	return nil
}

func (t *TestEmpty) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TestEmpty{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TestEmpty: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 4)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Cat (int64) (int64)
		case "Cat":

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Cat = int64(nval)

			} // t.Foo (string) (string)
		case "Foo":

			{
				sval, err := jr.ReadStringOrNull(8192)
				if err != nil {
					return err
				}
				if s != nil {
					t.Foo = (*string)(sval)
				}
			} // t.Beep (string) (string)
		case "Beep":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Beep = string(sval)
			}
		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *TestConstField) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Cats (string) (string)
	if len("Cats") > 8192 {
		return fmt.Errorf("Value in field \"Cats\" was too long")
	}

	{
		buf, err := json.Marshal("Cats")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Cats) > 8192 {
		return fmt.Errorf("Value in field t.Cats was too long")
	}

	{
		buf, err := json.Marshal(t.Cats)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Thing (int64) (int64)
	if len("Thing") > 8192 {
		return fmt.Errorf("Value in field \"Thing\" was too long")
	}

	{
		buf, err := json.Marshal("Thing")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		buf, err := json.Marshal(t.Thing)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	return nil
}

func (t *TestConstField) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TestConstField{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TestConstField: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 5)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Cats (string) (string)
		case "Cats":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Cats = string(sval)
			} // t.Thing (int64) (int64)
		case "Thing":

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Thing = int64(nval)

			}
		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *TestCanonicalFieldOrder) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Zp (string) (string)
	if len("Zp") > 8192 {
		return fmt.Errorf("Value in field \"Zp\" was too long")
	}

	{
		buf, err := json.Marshal("Zp")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Zp) > 8192 {
		return fmt.Errorf("Value in field t.Zp was too long")
	}

	{
		buf, err := json.Marshal(t.Zp)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Bar (string) (string)
	if len("Bar") > 8192 {
		return fmt.Errorf("Value in field \"Bar\" was too long")
	}

	{
		buf, err := json.Marshal("Bar")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Bar) > 8192 {
		return fmt.Errorf("Value in field t.Bar was too long")
	}

	{
		buf, err := json.Marshal(t.Bar)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Foo (int64) (int64)
	if len("Foo") > 8192 {
		return fmt.Errorf("Value in field \"Foo\" was too long")
	}

	{
		buf, err := json.Marshal("Foo")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		buf, err := json.Marshal(t.Foo)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Drond (int64) (int64)
	if len("Drond") > 8192 {
		return fmt.Errorf("Value in field \"Drond\" was too long")
	}

	{
		buf, err := json.Marshal("Drond")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		buf, err := json.Marshal(t.Drond)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	return nil
}

func (t *TestCanonicalFieldOrder) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TestCanonicalFieldOrder{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TestCanonicalFieldOrder: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 5)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Zp (string) (string)
		case "Zp":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Zp = string(sval)
			} // t.Bar (string) (string)
		case "Bar":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Bar = string(sval)
			} // t.Foo (int64) (int64)
		case "Foo":

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Foo = int64(nval)

			} // t.Drond (int64) (int64)
		case "Drond":

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Drond = int64(nval)

			}
		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *MapStringString) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Snorkleblump (map[string]string) (map)
	if len("Snorkleblump") > 8192 {
		return fmt.Errorf("Value in field \"Snorkleblump\" was too long")
	}

	{
		buf, err := json.Marshal("Snorkleblump")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		if len(t.Snorkleblump) > 4096 {
			return fmt.Errorf("cannot marshal t.Snorkleblump map too large")
		}

		if _, err := w.Write([]byte("{")); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.Snorkleblump))
		for k := range t.Snorkleblump {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for i, k := range keys {
			if i > 0 {
				if _, err := w.Write([]byte(",")); err != nil {
					return err
				}
			}
			v := t.Snorkleblump[k]
			if len(k) > 8192 {
				return fmt.Errorf("Value in field k was too long")
			}

			{
				buf, err := json.Marshal(k)
				if err != nil {
					return err
				}
				if _, err := w.Write(buf); err != nil {
					return err
				}
			}

			if _, err := w.Write([]byte(":")); err != nil {
				return err
			}

			if len(v) > 8192 {
				return fmt.Errorf("Value in field v was too long")
			}

			{
				buf, err := json.Marshal(v)
				if err != nil {
					return err
				}
				if _, err := w.Write(buf); err != nil {
					return err
				}
			}

		}
		if _, err := w.Write([]byte("}")); err != nil {
			return err
		}
	}
	return nil
}

func (t *MapStringString) UnmarshalCBOR(r io.Reader) (err error) {
	*t = MapStringString{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("MapStringString: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 12)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Snorkleblump (map[string]string) (map)
		case "Snorkleblump":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajMap {
				return fmt.Errorf("expected a map (major type 5)")
			}
			if extra > 4096 {
				return fmt.Errorf("t.Snorkleblump: map too large")
			}

			t.Snorkleblump = make(map[string]string, extra)

			for i, l := 0, int(extra); i < l; i++ {

				var k string

				{
					sval, err := jr.ReadString(8192)
					if err != nil {
						return err
					}
					k = string(sval)
				}
				var v string

				{
					sval, err := jr.ReadString(8192)
					if err != nil {
						return err
					}
					v = string(sval)
				}
				t.Snorkleblump[k] = v

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *TestSliceNilPreserve) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Cat (string) (string)
	if len("Cat") > 8192 {
		return fmt.Errorf("Value in field \"Cat\" was too long")
	}

	{
		buf, err := json.Marshal("Cat")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Cat) > 8192 {
		return fmt.Errorf("Value in field t.Cat was too long")
	}

	{
		buf, err := json.Marshal(t.Cat)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Not ([]uint64) (slice)
	if len("Not") > 8192 {
		return fmt.Errorf("Value in field \"Not\" was too long")
	}

	{
		buf, err := json.Marshal("Not")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Not) > 8192 {
		return fmt.Errorf("Slice value in field t.Not was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Not {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Beep (int64) (int64)
	if len("Beep") > 8192 {
		return fmt.Errorf("Value in field \"Beep\" was too long")
	}

	{
		buf, err := json.Marshal("Beep")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		buf, err := json.Marshal(t.Beep)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Other ([]uint8) (slice)
	if len("Other") > 8192 {
		return fmt.Errorf("Value in field \"Other\" was too long")
	}

	{
		buf, err := json.Marshal("Other")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Other) > 2097152 {
		return fmt.Errorf("Byte array in field t.Other was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.Other))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Stuff ([]uint64) (slice)
	if len("Stuff") > 8192 {
		return fmt.Errorf("Value in field \"Stuff\" was too long")
	}

	{
		buf, err := json.Marshal("Stuff")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Stuff) > 8192 {
		return fmt.Errorf("Slice value in field t.Stuff was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Stuff {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NotOther ([]uint8) (slice)
	if len("NotOther") > 8192 {
		return fmt.Errorf("Value in field \"NotOther\" was too long")
	}

	{
		buf, err := json.Marshal("NotOther")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.NotOther) > 2097152 {
		return fmt.Errorf("Byte array in field t.NotOther was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.NotOther))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}

	return nil
}

func (t *TestSliceNilPreserve) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TestSliceNilPreserve{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TestSliceNilPreserve: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 8)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Cat (string) (string)
		case "Cat":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Cat = string(sval)
			} // t.Not ([]uint64) (slice)
		case "Not":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Not: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Not = make([]uint64, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						nval, err := jr.ReadNumberAsUint64()
						if err != nil {
							return err
						}
						t.Not[i] = uint64(nval)

					}

				}
			}
			// t.Beep (int64) (int64)
		case "Beep":

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Beep = int64(nval)

			} // t.Other ([]uint8) (slice)
		case "Other":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.Other: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Other = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Other); err != nil {
				return err
			}

			// t.Stuff ([]uint64) (slice)
		case "Stuff":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Stuff: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Stuff = make([]uint64, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						nval, err := jr.ReadNumberAsUint64()
						if err != nil {
							return err
						}
						t.Stuff[i] = uint64(nval)

					}

				}
			}
			// t.NotOther ([]uint8) (slice)
		case "NotOther":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.NotOther: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.NotOther = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.NotOther); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *StringPtrSlices) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Strings ([]string) (slice)
	if len("Strings") > 8192 {
		return fmt.Errorf("Value in field \"Strings\" was too long")
	}

	{
		buf, err := json.Marshal("Strings")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Strings) > 8192 {
		return fmt.Errorf("Slice value in field t.Strings was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Strings {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if len(v) > 8192 {
			return fmt.Errorf("Value in field v was too long")
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.StringPtrs ([]*string) (slice)
	if len("StringPtrs") > 8192 {
		return fmt.Errorf("Value in field \"StringPtrs\" was too long")
	}

	{
		buf, err := json.Marshal("StringPtrs")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.StringPtrs) > 8192 {
		return fmt.Errorf("Slice value in field t.StringPtrs was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.StringPtrs {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if v == nil {
			if _, err := w.Write([]byte("null")); err != nil {
				return err
			}
		} else {
			if len(*v) > 8192 {
				return fmt.Errorf("Value in field v was too long")
			}

			buf, err := json.Marshal(*v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *StringPtrSlices) UnmarshalCBOR(r io.Reader) (err error) {
	*t = StringPtrSlices{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("StringPtrSlices: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 10)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Strings ([]string) (slice)
		case "Strings":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Strings: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Strings = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{
						sval, err := jr.ReadString(8192)
						if err != nil {
							return err
						}
						t.Strings[i] = string(sval)
					}

				}
			}
			// t.StringPtrs ([]*string) (slice)
		case "StringPtrs":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.StringPtrs: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.StringPtrs = make([]*string, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{
						sval, err := jr.ReadStringOrNull(8192)
						if err != nil {
							return err
						}
						if s != nil {
							t.StringPtrs[i] = (*string)(sval)
						}
					}

				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *FieldNameOverlap) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}
	if _, err := w.Write([]byte("{")); err != nil {
		return err
	}
	// t.Bar (string) (string)
	if len("Bar") > 8192 {
		return fmt.Errorf("Value in field \"Bar\" was too long")
	}

	{
		buf, err := json.Marshal("Bar")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.Bar) > 8192 {
		return fmt.Errorf("Value in field t.Bar was too long")
	}

	{
		buf, err := json.Marshal(t.Bar)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Foo (int64) (int64)
	if len("Foo") > 8192 {
		return fmt.Errorf("Value in field \"Foo\" was too long")
	}

	{
		buf, err := json.Marshal("Foo")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	{
		buf, err := json.Marshal(t.Foo)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.LongerNamedField (string) (string)
	if len("LongerNamedField") > 8192 {
		return fmt.Errorf("Value in field \"LongerNamedField\" was too long")
	}

	{
		buf, err := json.Marshal("LongerNamedField")
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(":")); err != nil {
		return err
	}
	if len(t.LongerNamedField) > 8192 {
		return fmt.Errorf("Value in field t.LongerNamedField was too long")
	}

	{
		buf, err := json.Marshal(t.LongerNamedField)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}
	return nil
}

func (t *FieldNameOverlap) UnmarshalCBOR(r io.Reader) (err error) {
	*t = FieldNameOverlap{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("FieldNameOverlap: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 16)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Bar (string) (string)
		case "Bar":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Bar = string(sval)
			} // t.Foo (int64) (int64)
		case "Foo":

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Foo = int64(nval)

			} // t.LongerNamedField (string) (string)
		case "LongerNamedField":

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.LongerNamedField = string(sval)
			}
		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
