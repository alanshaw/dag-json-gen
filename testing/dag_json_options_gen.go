// Code generated by github.com/alanshaw/dag-json-gen. DO NOT EDIT.

package testing

import (
	"fmt"
	"io"
	"math"
	"sort"

	jsg "github.com/alanshaw/dag-json-gen"
	cid "github.com/ipfs/go-cid"
)

var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *LimitedStruct) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return err
	}

	// t.Arr ([]uint64) (slice)
	if len(t.Arr) > 10 {
		return fmt.Errorf("Slice value in field t.Arr was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return err
	}
	for i, v := range t.Arr {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return err
			}
		}

		if err := jw.WriteUint64(uint64(v)); err != nil {
			return err
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return err
	}

	if err := jw.WriteComma(); err != nil {
		return err
	}

	// t.Byts ([]uint8) (slice)
	if len(t.Byts) > 9 {
		return fmt.Errorf("Byte array in field t.Byts was too long")
	}

	if err := jw.WriteBytes(t.Byts); err != nil {
		return err
	}

	if err := jw.WriteComma(); err != nil {
		return err
	}

	// t.Str (string) (string)
	if len(t.Str) > 8 {
		return fmt.Errorf("Value in field t.Str was too long")
	}
	if err := jw.WriteString(string(t.Str)); err != nil {
		return err
	}
	if err := jw.WriteArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *LimitedStruct) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = LimitedStruct{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}

	// t.Arr ([]uint64) (slice)

	{

		if err := jr.ReadArrayOpen(); err != nil {
			return err
		}
		t.Arr = []uint64{}
		item := make([]uint64, 0, 1)
		for i := 0; i < 10; i++ {

			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return err
				}
				item[0] = uint64(nval)

			}
			t.Arr = append(t.Arr, item[0])

			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return err
			}
			if close {
				break
			}
			if i == 10-1 {
				return fmt.Errorf("t.Arr: slice too large")
			}

		}
	}
	{
		close, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if close {
			return fmt.Errorf("json input has too few fields 1 < 3")
		}
	}

	// t.Byts ([]uint8) (slice)

	{
		bval, err := jr.ReadBytes(9)
		if err != nil {
			return err
		}
		t.Byts = []uint8(bval)
	}

	{
		close, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if close {
			return fmt.Errorf("json input has too few fields 2 < 3")
		}
	}

	// t.Str (string) (string)

	{
		sval, err := jr.ReadString(8)
		if err != nil {
			return err
		}
		t.Str = string(sval)
	}
	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}
