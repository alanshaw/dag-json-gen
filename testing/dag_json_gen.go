// Code generated by github.com/alanshaw/dag-json-gen. DO NOT EDIT.

package testing

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"math"
	"sort"

	jsg "github.com/alanshaw/dag-json-gen"
	cid "github.com/ipfs/go-cid"
	big "math/big"
)

var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *SignedArray) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Signed ([]uint64) (slice)
	if len(t.Signed) > 8192 {
		return fmt.Errorf("Slice value in field t.Signed was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Signed {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *SignedArray) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = SignedArray{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Signed ([]uint64) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Signed: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Signed = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return err
				}
				t.Signed[i] = uint64(nval)

			}

		}
	}

	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *SimpleTypeOne) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Foo (string) (string)
	if len(t.Foo) > 8192 {
		return fmt.Errorf("Value in field t.Foo was too long")
	}

	{
		buf, err := json.Marshal(t.Foo)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Value (uint64) (uint64)

	{
		buf, err := json.Marshal(t.Value)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > 2097152 {
		return fmt.Errorf("Byte array in field t.Binary was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.Binary))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Signed (int64) (int64)
	{
		buf, err := json.Marshal(t.Signed)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.NString (testing.NamedString) (string)
	if len(t.NString) > 8192 {
		return fmt.Errorf("Value in field t.NString was too long")
	}

	{
		buf, err := json.Marshal(t.NString)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Strings ([]string) (slice)
	if len(t.Strings) > 8192 {
		return fmt.Errorf("Slice value in field t.Strings was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Strings {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if len(v) > 8192 {
			return fmt.Errorf("Value in field v was too long")
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *SimpleTypeOne) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = SimpleTypeOne{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Foo (string) (string)

	{
		sval, err := jr.ReadString(8192)
		if err != nil {
			return err
		}
		t.Foo = string(sval)
	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 1 < 6")
		}
	}
	// t.Value (uint64) (uint64)

	{

		nval, err := jr.ReadNumberAsUint64()
		if err != nil {
			return err
		}
		t.Value = uint64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 2 < 6")
		}
	}
	// t.Binary ([]uint8) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 2097152 {
		return fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if _, err := io.ReadFull(cr, t.Binary); err != nil {
		return err
	}

	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 3 < 6")
		}
	}
	// t.Signed (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Signed = int64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 4 < 6")
		}
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, err := jr.ReadString(8192)
		if err != nil {
			return err
		}
		t.NString = NamedString(sval)
	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 5 < 6")
		}
	}
	// t.Strings ([]string) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Strings: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Strings = make([]string, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{
				sval, err := jr.ReadString(8192)
				if err != nil {
					return err
				}
				t.Strings[i] = string(sval)
			}

		}
	}

	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *SimpleTypeTwo) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Stuff (testing.SimpleTypeTwo) (struct)
	if err := t.Stuff.MarshalDagJSON(w); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Others ([]uint64) (slice)
	if len(t.Others) > 8192 {
		return fmt.Errorf("Slice value in field t.Others was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Others {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.SignedOthers ([]int64) (slice)
	if len(t.SignedOthers) > 8192 {
		return fmt.Errorf("Slice value in field t.SignedOthers was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.SignedOthers {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Test ([][]uint8) (slice)
	if len(t.Test) > 8192 {
		return fmt.Errorf("Slice value in field t.Test was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Test {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if len(v) > 2097152 {
			return fmt.Errorf("Byte array in field v was too long")
		}

		if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
			return err
		}
		if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(v))); err != nil {
			return err
		}
		if _, err := w.Write([]byte("\"}")); err != nil {
			return err
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Dog (string) (string)
	if len(t.Dog) > 8192 {
		return fmt.Errorf("Value in field t.Dog was too long")
	}

	{
		buf, err := json.Marshal(t.Dog)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Numbers ([]testing.NamedNumber) (slice)
	if len(t.Numbers) > 8192 {
		return fmt.Errorf("Slice value in field t.Numbers was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Numbers {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Pizza (uint64) (uint64)

	if t.Pizza == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		buf, err := json.Marshal(*t.Pizza)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.PointyPizza (testing.NamedNumber) (uint64)

	if t.PointyPizza == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		buf, err := json.Marshal(*t.PointyPizza)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)
	if len(t.Arrrrrghay) > 8192 {
		return fmt.Errorf("Slice value in field t.Arrrrrghay was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Arrrrrghay {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		if err := v.MarshalDagJSON(w); err != nil {
			return err
		}

		if _, err := w.Write([]byte("]")); err != nil {
			return err
		}
	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *SimpleTypeTwo) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = SimpleTypeTwo{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Stuff (testing.SimpleTypeTwo) (struct)

	{

		null, err := jr.PeekNull()
		if err != nil {
			return err
		}
		if null {
			if err := jr.ReadNull(); err != nil {
				return err
			}
		} else {
			t.Stuff = new(SimpleTypeTwo)
			if err := t.Stuff.UnmarshalCBOR(jr); err != nil {
				return fmt.Errorf("unmarshaling t.Stuff pointer: %w", err)
			}
		}

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 1 < 9")
		}
	}
	// t.Others ([]uint64) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Others: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Others = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return err
				}
				t.Others[i] = uint64(nval)

			}

		}
	}

	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 2 < 9")
		}
	}
	// t.SignedOthers ([]int64) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.SignedOthers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.SignedOthers = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.SignedOthers[i] = int64(nval)

			}

		}
	}

	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 3 < 9")
		}
	}
	// t.Test ([][]uint8) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Test: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Test = make([][]uint8, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.Test[i]: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Test[i] = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Test[i]); err != nil {
				return err
			}

		}
	}

	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 4 < 9")
		}
	}
	// t.Dog (string) (string)

	{
		sval, err := jr.ReadString(8192)
		if err != nil {
			return err
		}
		t.Dog = string(sval)
	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 5 < 9")
		}
	}
	// t.Numbers ([]testing.NamedNumber) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Numbers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Numbers = make([]NamedNumber, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return err
				}
				t.Numbers[i] = NamedNumber(nval)

			}

		}
	}

	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 6 < 9")
		}
	}
	// t.Pizza (uint64) (uint64)

	{

		nval, err := jr.ReadNumberAsUint64OrNull()
		if err != nil {
			return err
		}
		if nval != nil {
			typed := uint64(*nval)
			t.Pizza = &typed
		}

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 7 < 9")
		}
	}
	// t.PointyPizza (testing.NamedNumber) (uint64)

	{

		nval, err := jr.ReadNumberAsUint64OrNull()
		if err != nil {
			return err
		}
		if nval != nil {
			typed := NamedNumber(*nval)
			t.PointyPizza = &typed
		}

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 8 < 9")
		}
	}
	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Arrrrrghay: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}
	if extra != 3 {
		return fmt.Errorf("expected array to have 3 elements")
	}

	t.Arrrrrghay = [3]SimpleTypeOne{}
	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				if err := t.Arrrrrghay[i].UnmarshalCBOR(jr); err != nil {
					return fmt.Errorf("unmarshaling t.Arrrrrghay[i]: %w", err)
				}

			}
		}
	}

	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *DeferredContainer) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Stuff (testing.SimpleTypeOne) (struct)
	if err := t.Stuff.MarshalDagJSON(w); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Deferred (typegen.Deferred) (struct)
	if err := t.Deferred.MarshalDagJSON(w); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Value (uint64) (uint64)

	{
		buf, err := json.Marshal(t.Value)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *DeferredContainer) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = DeferredContainer{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Stuff (testing.SimpleTypeOne) (struct)

	{

		null, err := jr.PeekNull()
		if err != nil {
			return err
		}
		if null {
			if err := jr.ReadNull(); err != nil {
				return err
			}
		} else {
			t.Stuff = new(SimpleTypeOne)
			if err := t.Stuff.UnmarshalCBOR(jr); err != nil {
				return fmt.Errorf("unmarshaling t.Stuff pointer: %w", err)
			}
		}

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 1 < 3")
		}
	}
	// t.Deferred (typegen.Deferred) (struct)

	{

		t.Deferred = new(jsg.Deferred)

		if err := t.Deferred.UnmarshalCBOR(jr); err != nil {
			return fmt.Errorf("failed to read deferred field: %w", err)
		}
	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 2 < 3")
		}
	}
	// t.Value (uint64) (uint64)

	{

		nval, err := jr.ReadNumberAsUint64()
		if err != nil {
			return err
		}
		t.Value = uint64(nval)

	}
	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *FixedArrays) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Bytes ([20]uint8) (array)
	if len(t.Bytes) > 2097152 {
		return fmt.Errorf("Byte array in field t.Bytes was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.Bytes[:]))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Uint8 ([20]uint8) (array)
	if len(t.Uint8) > 2097152 {
		return fmt.Errorf("Byte array in field t.Uint8 was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.Uint8[:]))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Uint64 ([20]uint64) (array)
	if len(t.Uint64) > 8192 {
		return fmt.Errorf("Slice value in field t.Uint64 was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Uint64 {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}

		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

		if _, err := w.Write([]byte("]")); err != nil {
			return err
		}
	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *FixedArrays) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = FixedArrays{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Bytes ([20]uint8) (array)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 2097152 {
		return fmt.Errorf("t.Bytes: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	if extra != 20 {
		return fmt.Errorf("expected array to have 20 elements")
	}

	t.Bytes = [20]uint8{}
	if _, err := io.ReadFull(cr, t.Bytes[:]); err != nil {
		return err
	}

	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 1 < 3")
		}
	}
	// t.Uint8 ([20]uint8) (array)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 2097152 {
		return fmt.Errorf("t.Uint8: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	if extra != 20 {
		return fmt.Errorf("expected array to have 20 elements")
	}

	t.Uint8 = [20]uint8{}
	if _, err := io.ReadFull(cr, t.Uint8[:]); err != nil {
		return err
	}

	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 2 < 3")
		}
	}
	// t.Uint64 ([20]uint64) (array)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Uint64: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}
	if extra != 20 {
		return fmt.Errorf("expected array to have 20 elements")
	}

	t.Uint64 = [20]uint64{}
	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return err
				}
				t.Uint64[i] = uint64(nval)

			}
		}
	}

	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *ThingWithSomeTime) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.When (typegen.DagJsonTime) (struct)
	if err := t.When.MarshalDagJSON(w); err != nil {
		return err
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Stuff (int64) (int64)
	{
		buf, err := json.Marshal(t.Stuff)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.CatName (string) (string)
	if len(t.CatName) > 8192 {
		return fmt.Errorf("Value in field t.CatName was too long")
	}

	{
		buf, err := json.Marshal(t.CatName)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *ThingWithSomeTime) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = ThingWithSomeTime{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.When (typegen.DagJsonTime) (struct)

	{

		if err := t.When.UnmarshalCBOR(jr); err != nil {
			return fmt.Errorf("unmarshaling t.When: %w", err)
		}

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 1 < 3")
		}
	}
	// t.Stuff (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Stuff = int64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 2 < 3")
		}
	}
	// t.CatName (string) (string)

	{
		sval, err := jr.ReadString(8192)
		if err != nil {
			return err
		}
		t.CatName = string(sval)
	}
	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *BigField) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.LargeBytes ([]uint8) (slice)
	if len(t.LargeBytes) > 2097152 {
		return fmt.Errorf("Byte array in field t.LargeBytes was too long")
	}

	if _, err := w.Write([]byte("{\"bytes\":\"")); err != nil {
		return err
	}
	if _, err := w.Write([]byte(base64.RawStdEncoding.EncodeToString(t.LargeBytes))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("\"}")); err != nil {
		return err
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *BigField) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = BigField{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.LargeBytes ([]uint8) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 2097152 {
		return fmt.Errorf("t.LargeBytes: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.LargeBytes = make([]uint8, extra)
	}

	if _, err := io.ReadFull(cr, t.LargeBytes); err != nil {
		return err
	}

	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *IntArray) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Ints ([]int64) (slice)
	if len(t.Ints) > 8192 {
		return fmt.Errorf("Slice value in field t.Ints was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Ints {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *IntArray) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = IntArray{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Ints ([]int64) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Ints: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Ints = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Ints[i] = int64(nval)

			}

		}
	}

	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *IntAliasArray) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Ints ([]testing.IntAlias) (slice)
	if len(t.Ints) > 8192 {
		return fmt.Errorf("Slice value in field t.Ints was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range t.Ints {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *IntAliasArray) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = IntAliasArray{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Ints ([]testing.IntAlias) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("t.Ints: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Ints = make([]IntAlias, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				t.Ints[i] = IntAlias(nval)

			}

		}
	}

	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *TupleIntArray) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Int1 (int64) (int64)
	{
		buf, err := json.Marshal(t.Int1)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Int2 (int64) (int64)
	{
		buf, err := json.Marshal(t.Int2)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Int3 (int64) (int64)
	{
		buf, err := json.Marshal(t.Int3)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *TupleIntArray) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = TupleIntArray{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Int1 (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Int1 = int64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 1 < 3")
		}
	}
	// t.Int2 (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Int2 = int64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 2 < 3")
		}
	}
	// t.Int3 (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Int3 = int64(nval)

	}
	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *TupleIntArrayOptionals) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Int1 (int64) (int64)
	if t.Int1 == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		buf, err := json.Marshal(*t.Int1)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Int2 (int64) (int64)
	{
		buf, err := json.Marshal(t.Int2)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Int3 (uint64) (uint64)

	{
		buf, err := json.Marshal(t.Int3)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Int4 (uint64) (uint64)

	if t.Int4 == nil {
		if _, err := w.Write([]byte("null")); err != nil {
			return err
		}
	} else {
		buf, err := json.Marshal(*t.Int4)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *TupleIntArrayOptionals) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = TupleIntArrayOptionals{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Int1 (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64OrNull()
		if err != nil {
			return err
		}
		if nval != nil {
			typed := int64(*nval)
			t.Int1 = &typed
		}

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 1 < 4")
		}
	}
	// t.Int2 (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Int2 = int64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 2 < 4")
		}
	}
	// t.Int3 (uint64) (uint64)

	{

		nval, err := jr.ReadNumberAsUint64()
		if err != nil {
			return err
		}
		t.Int3 = uint64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 3 < 4")
		}
	}
	// t.Int4 (uint64) (uint64)

	{

		nval, err := jr.ReadNumberAsUint64OrNull()
		if err != nil {
			return err
		}
		if nval != nil {
			typed := uint64(*nval)
			t.Int4 = &typed
		}

	}
	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *IntArrayNewType) MarshalDagJSON(w io.Writer) error {

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// (*t) (testing.IntArrayNewType) (slice)
	if len((*t)) > 8192 {
		return fmt.Errorf("Slice value in field (*t) was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range *t {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *IntArrayNewType) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = IntArrayNewType{}

	jr := jsg.NewDagJsonReader(r)
	// (*t) (testing.IntArrayNewType) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("(*t): array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		(*t) = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				(*t)[i] = int64(nval)

			}

		}
	}

	return nil
}

func (t *IntArrayAliasNewType) MarshalDagJSON(w io.Writer) error {

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// (*t) (testing.IntArrayAliasNewType) (slice)
	if len((*t)) > 8192 {
		return fmt.Errorf("Slice value in field (*t) was too long")
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	for i, v := range *t {
		if i > 0 {
			if _, err := w.Write([]byte(",")); err != nil {
				return err
			}
		}
		{
			buf, err := json.Marshal(v)
			if err != nil {
				return err
			}
			if _, err := w.Write(buf); err != nil {
				return err
			}
		}

	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *IntArrayAliasNewType) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = IntArrayAliasNewType{}

	jr := jsg.NewDagJsonReader(r)
	// (*t) (testing.IntArrayAliasNewType) (slice)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}

	if extra > 8192 {
		return fmt.Errorf("(*t): array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		(*t) = make([]IntAlias, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error
			_ = maj
			_ = extra
			_ = err

			{

				nval, err := jr.ReadNumberAsInt64()
				if err != nil {
					return err
				}
				(*t)[i] = IntAlias(nval)

			}

		}
	}

	return nil
}

func (t *MapTransparentType) MarshalDagJSON(w io.Writer) error {

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// (*t) (testing.MapTransparentType) (map)
	{
		if len((*t)) > 4096 {
			return fmt.Errorf("cannot marshal (*t) map too large")
		}

		if _, err := w.Write([]byte("{")); err != nil {
			return err
		}

		keys := make([]string, 0, len((*t)))
		for k := range *t {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for i, k := range keys {
			if i > 0 {
				if _, err := w.Write([]byte(",")); err != nil {
					return err
				}
			}
			v := (*t)[k]
			if len(k) > 8192 {
				return fmt.Errorf("Value in field k was too long")
			}

			{
				buf, err := json.Marshal(k)
				if err != nil {
					return err
				}
				if _, err := w.Write(buf); err != nil {
					return err
				}
			}

			if _, err := w.Write([]byte(":")); err != nil {
				return err
			}

			if len(v) > 8192 {
				return fmt.Errorf("Value in field v was too long")
			}

			{
				buf, err := json.Marshal(v)
				if err != nil {
					return err
				}
				if _, err := w.Write(buf); err != nil {
					return err
				}
			}

		}
		if _, err := w.Write([]byte("}")); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *MapTransparentType) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = MapTransparentType{}

	jr := jsg.NewDagJsonReader(r)
	// (*t) (testing.MapTransparentType) (map)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("expected a map (major type 5)")
	}
	if extra > 4096 {
		return fmt.Errorf("(*t): map too large")
	}

	(*t) = make(map[string]string, extra)

	for i, l := 0, int(extra); i < l; i++ {

		var k string

		{
			sval, err := jr.ReadString(8192)
			if err != nil {
				return err
			}
			k = string(sval)
		}
		var v string

		{
			sval, err := jr.ReadString(8192)
			if err != nil {
				return err
			}
			v = string(sval)
		}
		(*t)[k] = v

	}

	return nil
}

func (t *BigIntContainer) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Int (big.Int) (struct)
	{
		if t.Int != nil && t.Int.Sign() < 0 {
			return fmt.Errorf("Value in field t.Int was a negative big-integer (not supported)")
		}
		if t.Int == nil {
			if _, err := w.Write([]byte("null")); err != nil {
				return err
			}
		} else {
			if _, err := w.Write([]byte(t.Int.String())); err != nil {
				return err
			}
		}
	}
	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *BigIntContainer) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = BigIntContainer{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Int (big.Int) (struct)

	{
		nval, err := jr.ReadNumberAsBigInt(256)
		if err != nil {
			return err
		}
		t.Int = nval
	}
	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}

func (t *TupleWithOptionalFields) MarshalDagJSON(w io.Writer) error {
	if t == nil {
		_, err := w.Write([]byte("null"))
		return err
	}

	if _, err := w.Write([]byte("[")); err != nil {
		return err
	}
	// t.Int1 (int64) (int64)
	{
		buf, err := json.Marshal(t.Int1)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Uint2 (uint64) (uint64)

	{
		buf, err := json.Marshal(t.Uint2)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Int3 (int64) (int64)
	{
		buf, err := json.Marshal(t.Int3)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte(",")); err != nil {
		return err
	}
	// t.Int4 (int64) (int64)
	{
		buf, err := json.Marshal(t.Int4)
		if err != nil {
			return err
		}
		if _, err := w.Write(buf); err != nil {
			return err
		}
	}

	if _, err := w.Write([]byte("]")); err != nil {
		return err
	}
	return nil
}

func (t *TupleWithOptionalFields) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = TupleWithOptionalFields{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return err
	}
	// t.Int1 (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Int1 = int64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 1 < 4")
		}
	}
	// t.Uint2 (uint64) (uint64)

	{

		nval, err := jr.ReadNumberAsUint64()
		if err != nil {
			return err
		}
		t.Uint2 = uint64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 2 < 4")
		}
	}
	// t.Int3 (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Int3 = int64(nval)

	}
	{
		end, err := jr.ReadArrayCloseOrComma()
		if err != nil {
			return err
		}
		if end {
			return fmt.Errorf("json input has too few fields 3 < 4")
		}
	}
	// t.Int4 (int64) (int64)

	{

		nval, err := jr.ReadNumberAsInt64()
		if err != nil {
			return err
		}
		t.Int4 = int64(nval)

	}
	if err := jr.ReadArrayClose(); err != nil {
		return err
	}
	return nil
}
