// Code generated by github.com/alanshaw/dag-json-gen. DO NOT EDIT.

package testing

import (
	"fmt"
	"io"
	"math"
	"sort"

	jsg "github.com/alanshaw/dag-json-gen"
	cid "github.com/ipfs/go-cid"
)

var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *SignedArray) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("SignedArray: %w", err)
	}

	// t.Signed ([]uint64) (slice)
	if len(t.Signed) > 8192 {
		return fmt.Errorf("Slice value in field t.Signed was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Signed: %w", err)
	}
	for i, v := range t.Signed {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Signed: %w", err)
			}
		}

		if err := jw.WriteUint64(uint64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Signed: %w", err)
	}

	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("SignedArray: %w", err)
	}
	return nil
}

func (t *SignedArray) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = SignedArray{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("SignedArray: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("SignedArray: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("SignedArray: %w", err)
		}
	} else {

		// t.Signed ([]uint64) (slice)

		{

			if err := jr.ReadArrayOpen(); err != nil {
				return fmt.Errorf("t.Signed: %w", err)
			}

			close, err := jr.PeekArrayClose()
			if err != nil {
				return fmt.Errorf("t.Signed: %w", err)
			}
			if close {
				if err := jr.ReadArrayClose(); err != nil {
					return fmt.Errorf("t.Signed: %w", err)
				}

			} else {
				item := make([]uint64, 1)
				for i := 0; i < 8192; i++ {

					{

						nval, err := jr.ReadNumberAsUint64()
						if err != nil {
							return fmt.Errorf("item[0]: %w", err)
						}
						item[0] = uint64(nval)

					}
					t.Signed = append(t.Signed, item[0])

					close, err := jr.ReadArrayCloseOrComma()
					if err != nil {
						return fmt.Errorf("t.Signed: %w", err)
					}
					if close {
						break
					}
					if i == 8192-1 {
						return fmt.Errorf("t.Signed: slice too large")
					}
				}
			}

		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("SignedArray: %w", err)
		}
	}
	return nil
}

func (t *SimpleTypeOne) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("SimpleTypeOne: %w", err)
	}

	// t.Foo (string) (string)
	if len(t.Foo) > 8192 {
		return fmt.Errorf("Value in field t.Foo was too long: %d", len(t.Foo))
	}
	if err := jw.WriteString(string(t.Foo)); err != nil {
		return fmt.Errorf("t.Foo: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Value: %w", err)
	}

	// t.Value (uint64) (uint64)

	if err := jw.WriteUint64(uint64(t.Value)); err != nil {
		return fmt.Errorf("t.Value: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Binary: %w", err)
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > 2097152 {
		return fmt.Errorf("Byte array in field t.Binary was too long")
	}

	if err := jw.WriteBytes(t.Binary); err != nil {
		return fmt.Errorf("t.Binary: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Signed: %w", err)
	}

	// t.Signed (int64) (int64)

	if err := jw.WriteInt64(int64(t.Signed)); err != nil {
		return fmt.Errorf("t.Signed: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("NString: %w", err)
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > 8192 {
		return fmt.Errorf("Value in field t.NString was too long: %d", len(t.NString))
	}
	if err := jw.WriteString(string(t.NString)); err != nil {
		return fmt.Errorf("t.NString: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Strings: %w", err)
	}

	// t.Strings ([]string) (slice)
	if len(t.Strings) > 8192 {
		return fmt.Errorf("Slice value in field t.Strings was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Strings: %w", err)
	}
	for i, v := range t.Strings {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Strings: %w", err)
			}
		}
		if len(v) > 8192 {
			return fmt.Errorf("Value in field v was too long: %d", len(v))
		}
		if err := jw.WriteString(string(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}
	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Strings: %w", err)
	}

	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("SimpleTypeOne: %w", err)
	}
	return nil
}

func (t *SimpleTypeOne) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = SimpleTypeOne{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("SimpleTypeOne: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("SimpleTypeOne: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("SimpleTypeOne: %w", err)
		}
	} else {

		// t.Foo (string) (string)

		{
			sval, err := jr.ReadString(8192)
			if err != nil {
				return fmt.Errorf("t.Foo: %w", err)
			}
			t.Foo = string(sval)
		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeOne: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 1 < 6")
			}
		}

		// t.Value (uint64) (uint64)

		{

			nval, err := jr.ReadNumberAsUint64()
			if err != nil {
				return fmt.Errorf("t.Value: %w", err)
			}
			t.Value = uint64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeOne: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 2 < 6")
			}
		}

		// t.Binary ([]uint8) (slice)

		{
			bval, err := jr.ReadBytes(2097152)
			if err != nil {
				return fmt.Errorf("t.Binary: %w", err)
			}
			t.Binary = []uint8(bval)
		}

		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeOne: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 3 < 6")
			}
		}

		// t.Signed (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Signed: %w", err)
			}
			t.Signed = int64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeOne: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 4 < 6")
			}
		}

		// t.NString (testing.NamedString) (string)

		{
			sval, err := jr.ReadString(8192)
			if err != nil {
				return fmt.Errorf("t.NString: %w", err)
			}
			t.NString = NamedString(sval)
		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeOne: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 5 < 6")
			}
		}

		// t.Strings ([]string) (slice)

		{

			if err := jr.ReadArrayOpen(); err != nil {
				return fmt.Errorf("t.Strings: %w", err)
			}

			close, err := jr.PeekArrayClose()
			if err != nil {
				return fmt.Errorf("t.Strings: %w", err)
			}
			if close {
				if err := jr.ReadArrayClose(); err != nil {
					return fmt.Errorf("t.Strings: %w", err)
				}

			} else {
				item := make([]string, 1)
				for i := 0; i < 8192; i++ {

					{
						sval, err := jr.ReadString(8192)
						if err != nil {
							return fmt.Errorf("item[0]: %w", err)
						}
						item[0] = string(sval)
					}
					t.Strings = append(t.Strings, item[0])

					close, err := jr.ReadArrayCloseOrComma()
					if err != nil {
						return fmt.Errorf("t.Strings: %w", err)
					}
					if close {
						break
					}
					if i == 8192-1 {
						return fmt.Errorf("t.Strings: slice too large")
					}
				}
			}

		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("SimpleTypeOne: %w", err)
		}
	}
	return nil
}

func (t *SimpleTypeTwo) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("SimpleTypeTwo: %w", err)
	}

	// t.Stuff (testing.SimpleTypeTwo) (struct)
	if err := t.Stuff.MarshalDagJSON(jw); err != nil {
		return fmt.Errorf("t.Stuff: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Others: %w", err)
	}

	// t.Others ([]uint64) (slice)
	if len(t.Others) > 8192 {
		return fmt.Errorf("Slice value in field t.Others was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Others: %w", err)
	}
	for i, v := range t.Others {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Others: %w", err)
			}
		}

		if err := jw.WriteUint64(uint64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Others: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("SignedOthers: %w", err)
	}

	// t.SignedOthers ([]int64) (slice)
	if len(t.SignedOthers) > 8192 {
		return fmt.Errorf("Slice value in field t.SignedOthers was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.SignedOthers: %w", err)
	}
	for i, v := range t.SignedOthers {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.SignedOthers: %w", err)
			}
		}

		if err := jw.WriteInt64(int64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.SignedOthers: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Test: %w", err)
	}

	// t.Test ([][]uint8) (slice)
	if len(t.Test) > 8192 {
		return fmt.Errorf("Slice value in field t.Test was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Test: %w", err)
	}
	for i, v := range t.Test {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Test: %w", err)
			}
		}
		if len(v) > 2097152 {
			return fmt.Errorf("Byte array in field v was too long")
		}

		if err := jw.WriteBytes(v); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Test: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Dog: %w", err)
	}

	// t.Dog (string) (string)
	if len(t.Dog) > 8192 {
		return fmt.Errorf("Value in field t.Dog was too long: %d", len(t.Dog))
	}
	if err := jw.WriteString(string(t.Dog)); err != nil {
		return fmt.Errorf("t.Dog: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Numbers: %w", err)
	}

	// t.Numbers ([]testing.NamedNumber) (slice)
	if len(t.Numbers) > 8192 {
		return fmt.Errorf("Slice value in field t.Numbers was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Numbers: %w", err)
	}
	for i, v := range t.Numbers {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Numbers: %w", err)
			}
		}

		if err := jw.WriteUint64(uint64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Numbers: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Pizza: %w", err)
	}

	// t.Pizza (uint64) (uint64)

	if t.Pizza == nil {
		if err := jw.WriteNull(); err != nil {
			return fmt.Errorf("t.Pizza: %w", err)
		}
	} else {
		if err := jw.WriteUint64(uint64(*t.Pizza)); err != nil {
			return fmt.Errorf("t.Pizza: %w", err)
		}
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("PointyPizza: %w", err)
	}

	// t.PointyPizza (testing.NamedNumber) (uint64)

	if t.PointyPizza == nil {
		if err := jw.WriteNull(); err != nil {
			return fmt.Errorf("t.PointyPizza: %w", err)
		}
	} else {
		if err := jw.WriteUint64(uint64(*t.PointyPizza)); err != nil {
			return fmt.Errorf("t.PointyPizza: %w", err)
		}
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Arrrrrghay: %w", err)
	}

	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)
	if len(t.Arrrrrghay) > 8192 {
		return fmt.Errorf("Slice value in field t.Arrrrrghay was too long")
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Arrrrrghay: %w", err)
	}
	for i, v := range t.Arrrrrghay {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Arrrrrghay: %w", err)
			}
		}
		if err := v.MarshalDagJSON(jw); err != nil {
			return fmt.Errorf("v: %w", err)
		}
	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Arrrrrghay: %w", err)
	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("SimpleTypeTwo: %w", err)
	}
	return nil
}

func (t *SimpleTypeTwo) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = SimpleTypeTwo{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("SimpleTypeTwo: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("SimpleTypeTwo: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("SimpleTypeTwo: %w", err)
		}
	} else {

		// t.Stuff (testing.SimpleTypeTwo) (struct)

		{
			null, err := jr.PeekNull()
			if err != nil {
				return fmt.Errorf("t.Stuff: %w", err)
			}
			if null {
				if err := jr.ReadNull(); err != nil {
					return fmt.Errorf("t.Stuff: %w", err)
				}
			} else {
				t.Stuff = new(SimpleTypeTwo)
				if err := t.Stuff.UnmarshalDagJSON(jr); err != nil {
					return fmt.Errorf("unmarshaling t.Stuff pointer: %w", err)
				}
			}
		}

		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeTwo: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 1 < 9")
			}
		}

		// t.Others ([]uint64) (slice)

		{

			if err := jr.ReadArrayOpen(); err != nil {
				return fmt.Errorf("t.Others: %w", err)
			}

			close, err := jr.PeekArrayClose()
			if err != nil {
				return fmt.Errorf("t.Others: %w", err)
			}
			if close {
				if err := jr.ReadArrayClose(); err != nil {
					return fmt.Errorf("t.Others: %w", err)
				}

			} else {
				item := make([]uint64, 1)
				for i := 0; i < 8192; i++ {

					{

						nval, err := jr.ReadNumberAsUint64()
						if err != nil {
							return fmt.Errorf("item[0]: %w", err)
						}
						item[0] = uint64(nval)

					}
					t.Others = append(t.Others, item[0])

					close, err := jr.ReadArrayCloseOrComma()
					if err != nil {
						return fmt.Errorf("t.Others: %w", err)
					}
					if close {
						break
					}
					if i == 8192-1 {
						return fmt.Errorf("t.Others: slice too large")
					}
				}
			}

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeTwo: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 2 < 9")
			}
		}

		// t.SignedOthers ([]int64) (slice)

		{

			if err := jr.ReadArrayOpen(); err != nil {
				return fmt.Errorf("t.SignedOthers: %w", err)
			}

			close, err := jr.PeekArrayClose()
			if err != nil {
				return fmt.Errorf("t.SignedOthers: %w", err)
			}
			if close {
				if err := jr.ReadArrayClose(); err != nil {
					return fmt.Errorf("t.SignedOthers: %w", err)
				}

			} else {
				item := make([]int64, 1)
				for i := 0; i < 8192; i++ {

					{

						nval, err := jr.ReadNumberAsInt64()
						if err != nil {
							return fmt.Errorf("item[0]: %w", err)
						}
						item[0] = int64(nval)

					}
					t.SignedOthers = append(t.SignedOthers, item[0])

					close, err := jr.ReadArrayCloseOrComma()
					if err != nil {
						return fmt.Errorf("t.SignedOthers: %w", err)
					}
					if close {
						break
					}
					if i == 8192-1 {
						return fmt.Errorf("t.SignedOthers: slice too large")
					}
				}
			}

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeTwo: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 3 < 9")
			}
		}

		// t.Test ([][]uint8) (slice)

		{

			if err := jr.ReadArrayOpen(); err != nil {
				return fmt.Errorf("t.Test: %w", err)
			}

			close, err := jr.PeekArrayClose()
			if err != nil {
				return fmt.Errorf("t.Test: %w", err)
			}
			if close {
				if err := jr.ReadArrayClose(); err != nil {
					return fmt.Errorf("t.Test: %w", err)
				}

			} else {
				item := make([][]uint8, 1)
				for i := 0; i < 8192; i++ {

					{
						bval, err := jr.ReadBytes(2097152)
						if err != nil {
							return fmt.Errorf("item[0]: %w", err)
						}
						item[0] = []uint8(bval)
					}

					t.Test = append(t.Test, item[0])

					close, err := jr.ReadArrayCloseOrComma()
					if err != nil {
						return fmt.Errorf("t.Test: %w", err)
					}
					if close {
						break
					}
					if i == 8192-1 {
						return fmt.Errorf("t.Test: slice too large")
					}
				}
			}

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeTwo: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 4 < 9")
			}
		}

		// t.Dog (string) (string)

		{
			sval, err := jr.ReadString(8192)
			if err != nil {
				return fmt.Errorf("t.Dog: %w", err)
			}
			t.Dog = string(sval)
		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeTwo: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 5 < 9")
			}
		}

		// t.Numbers ([]testing.NamedNumber) (slice)

		{

			if err := jr.ReadArrayOpen(); err != nil {
				return fmt.Errorf("t.Numbers: %w", err)
			}

			close, err := jr.PeekArrayClose()
			if err != nil {
				return fmt.Errorf("t.Numbers: %w", err)
			}
			if close {
				if err := jr.ReadArrayClose(); err != nil {
					return fmt.Errorf("t.Numbers: %w", err)
				}

			} else {
				item := make([]NamedNumber, 1)
				for i := 0; i < 8192; i++ {

					{

						nval, err := jr.ReadNumberAsUint64()
						if err != nil {
							return fmt.Errorf("item[0]: %w", err)
						}
						item[0] = NamedNumber(nval)

					}
					t.Numbers = append(t.Numbers, item[0])

					close, err := jr.ReadArrayCloseOrComma()
					if err != nil {
						return fmt.Errorf("t.Numbers: %w", err)
					}
					if close {
						break
					}
					if i == 8192-1 {
						return fmt.Errorf("t.Numbers: slice too large")
					}
				}
			}

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeTwo: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 6 < 9")
			}
		}

		// t.Pizza (uint64) (uint64)

		{

			nval, err := jr.ReadNumberAsUint64OrNull()
			if err != nil {
				return fmt.Errorf("t.Pizza: %w", err)
			}
			if nval != nil {
				typed := uint64(*nval)
				t.Pizza = &typed
			}

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeTwo: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 7 < 9")
			}
		}

		// t.PointyPizza (testing.NamedNumber) (uint64)

		{

			nval, err := jr.ReadNumberAsUint64OrNull()
			if err != nil {
				return fmt.Errorf("t.PointyPizza: %w", err)
			}
			if nval != nil {
				typed := NamedNumber(*nval)
				t.PointyPizza = &typed
			}

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("SimpleTypeTwo: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 8 < 9")
			}
		}

		// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)

		if err := jr.ReadArrayOpen(); err != nil {
			return fmt.Errorf("t.Arrrrrghay: %w", err)
		}

		t.Arrrrrghay = [3]SimpleTypeOne{}
		for i := 0; i < 8192; i++ {

			if err := t.Arrrrrghay[i].UnmarshalDagJSON(jr); err != nil {
				return fmt.Errorf("unmarshaling t.Arrrrrghay[i]: %w", err)
			}

			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("t.Arrrrrghay: %w", err)
			}
			if close {
				break
			}
			if i == 8192-1 {
				return fmt.Errorf("t.Arrrrrghay: array too large")
			}
		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("SimpleTypeTwo: %w", err)
		}
	}
	return nil
}

func (t *DeferredContainer) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("DeferredContainer: %w", err)
	}

	// t.Stuff (testing.SimpleTypeOne) (struct)
	if err := t.Stuff.MarshalDagJSON(jw); err != nil {
		return fmt.Errorf("t.Stuff: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Deferred: %w", err)
	}

	// t.Deferred (typegen.Deferred) (struct)
	if err := t.Deferred.MarshalDagJSON(jw); err != nil {
		return fmt.Errorf("t.Deferred: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Value: %w", err)
	}

	// t.Value (uint64) (uint64)

	if err := jw.WriteUint64(uint64(t.Value)); err != nil {
		return fmt.Errorf("t.Value: %w", err)
	}

	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("DeferredContainer: %w", err)
	}
	return nil
}

func (t *DeferredContainer) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = DeferredContainer{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("DeferredContainer: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("DeferredContainer: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("DeferredContainer: %w", err)
		}
	} else {

		// t.Stuff (testing.SimpleTypeOne) (struct)

		{
			null, err := jr.PeekNull()
			if err != nil {
				return fmt.Errorf("t.Stuff: %w", err)
			}
			if null {
				if err := jr.ReadNull(); err != nil {
					return fmt.Errorf("t.Stuff: %w", err)
				}
			} else {
				t.Stuff = new(SimpleTypeOne)
				if err := t.Stuff.UnmarshalDagJSON(jr); err != nil {
					return fmt.Errorf("unmarshaling t.Stuff pointer: %w", err)
				}
			}
		}

		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("DeferredContainer: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 1 < 3")
			}
		}

		// t.Deferred (typegen.Deferred) (struct)

		t.Deferred = new(jsg.Deferred)

		if err := t.Deferred.UnmarshalDagJSON(jr); err != nil {
			return fmt.Errorf("failed to read deferred field: %w", err)
		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("DeferredContainer: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 2 < 3")
			}
		}

		// t.Value (uint64) (uint64)

		{

			nval, err := jr.ReadNumberAsUint64()
			if err != nil {
				return fmt.Errorf("t.Value: %w", err)
			}
			t.Value = uint64(nval)

		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("DeferredContainer: %w", err)
		}
	}
	return nil
}

func (t *FixedArrays) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("FixedArrays: %w", err)
	}

	// t.Bytes ([20]uint8) (array)
	if len(t.Bytes) > 2097152 {
		return fmt.Errorf("Byte array in field t.Bytes was too long")
	}
	if err := jw.WriteBytes(t.Bytes[:]); err != nil {
		return fmt.Errorf("t.Bytes: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Uint8: %w", err)
	}

	// t.Uint8 ([20]uint8) (array)
	if len(t.Uint8) > 2097152 {
		return fmt.Errorf("Byte array in field t.Uint8 was too long")
	}
	if err := jw.WriteBytes(t.Uint8[:]); err != nil {
		return fmt.Errorf("t.Uint8: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Uint64: %w", err)
	}

	// t.Uint64 ([20]uint64) (array)
	if len(t.Uint64) > 8192 {
		return fmt.Errorf("Slice value in field t.Uint64 was too long")
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Uint64: %w", err)
	}
	for i, v := range t.Uint64 {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Uint64: %w", err)
			}
		}

		if err := jw.WriteUint64(uint64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Uint64: %w", err)
	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("FixedArrays: %w", err)
	}
	return nil
}

func (t *FixedArrays) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = FixedArrays{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("FixedArrays: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("FixedArrays: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("FixedArrays: %w", err)
		}
	} else {

		// t.Bytes ([20]uint8) (array)

		{
			bval, err := jr.ReadBytes(2097152)
			if err != nil {
				return fmt.Errorf("t.Bytes: %w", err)
			}
			t.Bytes = [20]uint8(bval)
		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("FixedArrays: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 1 < 3")
			}
		}

		// t.Uint8 ([20]uint8) (array)

		{
			bval, err := jr.ReadBytes(2097152)
			if err != nil {
				return fmt.Errorf("t.Uint8: %w", err)
			}
			t.Uint8 = [20]uint8(bval)
		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("FixedArrays: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 2 < 3")
			}
		}

		// t.Uint64 ([20]uint64) (array)

		if err := jr.ReadArrayOpen(); err != nil {
			return fmt.Errorf("t.Uint64: %w", err)
		}

		t.Uint64 = [20]uint64{}
		for i := 0; i < 8192; i++ {
			{

				nval, err := jr.ReadNumberAsUint64()
				if err != nil {
					return fmt.Errorf("t.Uint64[i]: %w", err)
				}
				t.Uint64[i] = uint64(nval)

			}
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("t.Uint64: %w", err)
			}
			if close {
				break
			}
			if i == 8192-1 {
				return fmt.Errorf("t.Uint64: array too large")
			}
		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("FixedArrays: %w", err)
		}
	}
	return nil
}

func (t *ThingWithSomeTime) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("ThingWithSomeTime: %w", err)
	}

	// t.When (typegen.DagJsonTime) (struct)
	if err := t.When.MarshalDagJSON(jw); err != nil {
		return fmt.Errorf("t.When: %w", err)
	}
	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Stuff: %w", err)
	}

	// t.Stuff (int64) (int64)

	if err := jw.WriteInt64(int64(t.Stuff)); err != nil {
		return fmt.Errorf("t.Stuff: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("CatName: %w", err)
	}

	// t.CatName (string) (string)
	if len(t.CatName) > 8192 {
		return fmt.Errorf("Value in field t.CatName was too long: %d", len(t.CatName))
	}
	if err := jw.WriteString(string(t.CatName)); err != nil {
		return fmt.Errorf("t.CatName: %w", err)
	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("ThingWithSomeTime: %w", err)
	}
	return nil
}

func (t *ThingWithSomeTime) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = ThingWithSomeTime{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("ThingWithSomeTime: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("ThingWithSomeTime: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("ThingWithSomeTime: %w", err)
		}
	} else {

		// t.When (typegen.DagJsonTime) (struct)

		if err := t.When.UnmarshalDagJSON(jr); err != nil {
			return fmt.Errorf("unmarshaling t.When: %w", err)
		}

		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("ThingWithSomeTime: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 1 < 3")
			}
		}

		// t.Stuff (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Stuff: %w", err)
			}
			t.Stuff = int64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("ThingWithSomeTime: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 2 < 3")
			}
		}

		// t.CatName (string) (string)

		{
			sval, err := jr.ReadString(8192)
			if err != nil {
				return fmt.Errorf("t.CatName: %w", err)
			}
			t.CatName = string(sval)
		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("ThingWithSomeTime: %w", err)
		}
	}
	return nil
}

func (t *BigField) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("BigField: %w", err)
	}

	// t.LargeBytes ([]uint8) (slice)
	if len(t.LargeBytes) > 10000000 {
		return fmt.Errorf("Byte array in field t.LargeBytes was too long")
	}

	if err := jw.WriteBytes(t.LargeBytes); err != nil {
		return fmt.Errorf("t.LargeBytes: %w", err)
	}

	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("BigField: %w", err)
	}
	return nil
}

func (t *BigField) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = BigField{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("BigField: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("BigField: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("BigField: %w", err)
		}
	} else {

		// t.LargeBytes ([]uint8) (slice)

		{
			bval, err := jr.ReadBytes(10000000)
			if err != nil {
				return fmt.Errorf("t.LargeBytes: %w", err)
			}
			t.LargeBytes = []uint8(bval)
		}

		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("BigField: %w", err)
		}
	}
	return nil
}

func (t *IntArray) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)

	// t.Ints ([]int64) (slice)
	if len(t.Ints) > 8192 {
		return fmt.Errorf("Slice value in field t.Ints was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Ints: %w", err)
	}
	for i, v := range t.Ints {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Ints: %w", err)
			}
		}

		if err := jw.WriteInt64(int64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Ints: %w", err)
	}

	return nil
}

func (t *IntArray) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = IntArray{}

	jr := jsg.NewDagJsonReader(r)

	// t.Ints ([]int64) (slice)

	{

		if err := jr.ReadArrayOpen(); err != nil {
			return fmt.Errorf("t.Ints: %w", err)
		}

		close, err := jr.PeekArrayClose()
		if err != nil {
			return fmt.Errorf("t.Ints: %w", err)
		}
		if close {
			if err := jr.ReadArrayClose(); err != nil {
				return fmt.Errorf("t.Ints: %w", err)
			}

		} else {
			item := make([]int64, 1)
			for i := 0; i < 8192; i++ {

				{

					nval, err := jr.ReadNumberAsInt64()
					if err != nil {
						return fmt.Errorf("item[0]: %w", err)
					}
					item[0] = int64(nval)

				}
				t.Ints = append(t.Ints, item[0])

				close, err := jr.ReadArrayCloseOrComma()
				if err != nil {
					return fmt.Errorf("t.Ints: %w", err)
				}
				if close {
					break
				}
				if i == 8192-1 {
					return fmt.Errorf("t.Ints: slice too large")
				}
			}
		}

	}
	return nil
}

func (t *IntAliasArray) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)

	// t.Ints ([]testing.IntAlias) (slice)
	if len(t.Ints) > 8192 {
		return fmt.Errorf("Slice value in field t.Ints was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("t.Ints: %w", err)
	}
	for i, v := range t.Ints {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("t.Ints: %w", err)
			}
		}

		if err := jw.WriteInt64(int64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("t.Ints: %w", err)
	}

	return nil
}

func (t *IntAliasArray) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = IntAliasArray{}

	jr := jsg.NewDagJsonReader(r)

	// t.Ints ([]testing.IntAlias) (slice)

	{

		if err := jr.ReadArrayOpen(); err != nil {
			return fmt.Errorf("t.Ints: %w", err)
		}

		close, err := jr.PeekArrayClose()
		if err != nil {
			return fmt.Errorf("t.Ints: %w", err)
		}
		if close {
			if err := jr.ReadArrayClose(); err != nil {
				return fmt.Errorf("t.Ints: %w", err)
			}

		} else {
			item := make([]IntAlias, 1)
			for i := 0; i < 8192; i++ {

				{

					nval, err := jr.ReadNumberAsInt64()
					if err != nil {
						return fmt.Errorf("item[0]: %w", err)
					}
					item[0] = IntAlias(nval)

				}
				t.Ints = append(t.Ints, item[0])

				close, err := jr.ReadArrayCloseOrComma()
				if err != nil {
					return fmt.Errorf("t.Ints: %w", err)
				}
				if close {
					break
				}
				if i == 8192-1 {
					return fmt.Errorf("t.Ints: slice too large")
				}
			}
		}

	}
	return nil
}

func (t *TupleIntArray) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("TupleIntArray: %w", err)
	}

	// t.Int1 (int64) (int64)

	if err := jw.WriteInt64(int64(t.Int1)); err != nil {
		return fmt.Errorf("t.Int1: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Int2: %w", err)
	}

	// t.Int2 (int64) (int64)

	if err := jw.WriteInt64(int64(t.Int2)); err != nil {
		return fmt.Errorf("t.Int2: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Int3: %w", err)
	}

	// t.Int3 (int64) (int64)

	if err := jw.WriteInt64(int64(t.Int3)); err != nil {
		return fmt.Errorf("t.Int3: %w", err)
	}

	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("TupleIntArray: %w", err)
	}
	return nil
}

func (t *TupleIntArray) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = TupleIntArray{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("TupleIntArray: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("TupleIntArray: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("TupleIntArray: %w", err)
		}
	} else {

		// t.Int1 (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Int1: %w", err)
			}
			t.Int1 = int64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("TupleIntArray: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 1 < 3")
			}
		}

		// t.Int2 (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Int2: %w", err)
			}
			t.Int2 = int64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("TupleIntArray: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 2 < 3")
			}
		}

		// t.Int3 (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Int3: %w", err)
			}
			t.Int3 = int64(nval)

		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("TupleIntArray: %w", err)
		}
	}
	return nil
}

func (t *TupleIntArrayOptionals) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("TupleIntArrayOptionals: %w", err)
	}

	// t.Int1 (int64) (int64)

	if t.Int1 == nil {
		if err := jw.WriteNull(); err != nil {
			return fmt.Errorf("t.Int1: %w", err)
		}
	} else {
		if err := jw.WriteInt64(int64(*t.Int1)); err != nil {
			return fmt.Errorf("t.Int1: %w", err)
		}
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Int2: %w", err)
	}

	// t.Int2 (int64) (int64)

	if err := jw.WriteInt64(int64(t.Int2)); err != nil {
		return fmt.Errorf("t.Int2: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Int3: %w", err)
	}

	// t.Int3 (uint64) (uint64)

	if err := jw.WriteUint64(uint64(t.Int3)); err != nil {
		return fmt.Errorf("t.Int3: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Int4: %w", err)
	}

	// t.Int4 (uint64) (uint64)

	if t.Int4 == nil {
		if err := jw.WriteNull(); err != nil {
			return fmt.Errorf("t.Int4: %w", err)
		}
	} else {
		if err := jw.WriteUint64(uint64(*t.Int4)); err != nil {
			return fmt.Errorf("t.Int4: %w", err)
		}
	}

	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("TupleIntArrayOptionals: %w", err)
	}
	return nil
}

func (t *TupleIntArrayOptionals) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = TupleIntArrayOptionals{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("TupleIntArrayOptionals: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("TupleIntArrayOptionals: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("TupleIntArrayOptionals: %w", err)
		}
	} else {

		// t.Int1 (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64OrNull()
			if err != nil {
				return fmt.Errorf("t.Int1: %w", err)
			}
			if nval != nil {
				typed := int64(*nval)
				t.Int1 = &typed
			}

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("TupleIntArrayOptionals: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 1 < 4")
			}
		}

		// t.Int2 (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Int2: %w", err)
			}
			t.Int2 = int64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("TupleIntArrayOptionals: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 2 < 4")
			}
		}

		// t.Int3 (uint64) (uint64)

		{

			nval, err := jr.ReadNumberAsUint64()
			if err != nil {
				return fmt.Errorf("t.Int3: %w", err)
			}
			t.Int3 = uint64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("TupleIntArrayOptionals: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 3 < 4")
			}
		}

		// t.Int4 (uint64) (uint64)

		{

			nval, err := jr.ReadNumberAsUint64OrNull()
			if err != nil {
				return fmt.Errorf("t.Int4: %w", err)
			}
			if nval != nil {
				typed := uint64(*nval)
				t.Int4 = &typed
			}

		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("TupleIntArrayOptionals: %w", err)
		}
	}
	return nil
}

func (t *IntArrayNewType) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)

	// (*t) (testing.IntArrayNewType) (slice)
	if len((*t)) > 8192 {
		return fmt.Errorf("Slice value in field (*t) was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("(*t): %w", err)
	}
	for i, v := range *t {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("(*t): %w", err)
			}
		}

		if err := jw.WriteInt64(int64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("(*t): %w", err)
	}

	return nil
}

func (t *IntArrayNewType) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = IntArrayNewType{}

	jr := jsg.NewDagJsonReader(r)

	// (*t) (testing.IntArrayNewType) (slice)

	{

		if err := jr.ReadArrayOpen(); err != nil {
			return fmt.Errorf("(*t): %w", err)
		}

		close, err := jr.PeekArrayClose()
		if err != nil {
			return fmt.Errorf("(*t): %w", err)
		}
		if close {
			if err := jr.ReadArrayClose(); err != nil {
				return fmt.Errorf("(*t): %w", err)
			}

		} else {
			item := make([]int64, 1)
			for i := 0; i < 8192; i++ {

				{

					nval, err := jr.ReadNumberAsInt64()
					if err != nil {
						return fmt.Errorf("item[0]: %w", err)
					}
					item[0] = int64(nval)

				}
				(*t) = append((*t), item[0])

				close, err := jr.ReadArrayCloseOrComma()
				if err != nil {
					return fmt.Errorf("(*t): %w", err)
				}
				if close {
					break
				}
				if i == 8192-1 {
					return fmt.Errorf("(*t): slice too large")
				}
			}
		}

	}
	return nil
}

func (t *IntArrayAliasNewType) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)

	// (*t) (testing.IntArrayAliasNewType) (slice)
	if len((*t)) > 8192 {
		return fmt.Errorf("Slice value in field (*t) was too long")
	}

	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("(*t): %w", err)
	}
	for i, v := range *t {
		if i > 0 {
			if err := jw.WriteComma(); err != nil {
				return fmt.Errorf("(*t): %w", err)
			}
		}

		if err := jw.WriteInt64(int64(v)); err != nil {
			return fmt.Errorf("v: %w", err)
		}

	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("(*t): %w", err)
	}

	return nil
}

func (t *IntArrayAliasNewType) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = IntArrayAliasNewType{}

	jr := jsg.NewDagJsonReader(r)

	// (*t) (testing.IntArrayAliasNewType) (slice)

	{

		if err := jr.ReadArrayOpen(); err != nil {
			return fmt.Errorf("(*t): %w", err)
		}

		close, err := jr.PeekArrayClose()
		if err != nil {
			return fmt.Errorf("(*t): %w", err)
		}
		if close {
			if err := jr.ReadArrayClose(); err != nil {
				return fmt.Errorf("(*t): %w", err)
			}

		} else {
			item := make([]IntAlias, 1)
			for i := 0; i < 8192; i++ {

				{

					nval, err := jr.ReadNumberAsInt64()
					if err != nil {
						return fmt.Errorf("item[0]: %w", err)
					}
					item[0] = IntAlias(nval)

				}
				(*t) = append((*t), item[0])

				close, err := jr.ReadArrayCloseOrComma()
				if err != nil {
					return fmt.Errorf("(*t): %w", err)
				}
				if close {
					break
				}
				if i == 8192-1 {
					return fmt.Errorf("(*t): slice too large")
				}
			}
		}

	}
	return nil
}

func (t *MapTransparentType) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)

	// (*t) (testing.MapTransparentType) (map)
	{
		if len((*t)) > 4096 {
			return fmt.Errorf("cannot marshal (*t) map too large")
		}

		if err := jw.WriteObjectOpen(); err != nil {
			return fmt.Errorf("(*t): %w", err)
		}

		keys := make([]string, 0, len((*t)))
		for k := range *t {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for i, k := range keys {
			if i > 0 {
				if err := jw.WriteComma(); err != nil {
					return fmt.Errorf("(*t): %w", err)
				}
			}
			v := (*t)[k]
			if len(k) > 8192 {
				return fmt.Errorf("Value in field k was too long: %d", len(k))
			}
			if err := jw.WriteString(string(k)); err != nil {
				return fmt.Errorf("k: %w", err)
			}
			if err := jw.WriteObjectColon(); err != nil {
				return fmt.Errorf("(*t): %w", err)
			}

			if len(v) > 8192 {
				return fmt.Errorf("Value in field v was too long: %d", len(v))
			}
			if err := jw.WriteString(string(v)); err != nil {
				return fmt.Errorf("v: %w", err)
			}
		}
		if err := jw.WriteObjectClose(); err != nil {
			return fmt.Errorf("(*t): %w", err)
		}
	}

	return nil
}

func (t *MapTransparentType) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = MapTransparentType{}

	jr := jsg.NewDagJsonReader(r)

	// (*t) (testing.MapTransparentType) (map)

	if err := jr.ReadObjectOpen(); err != nil {
		return fmt.Errorf("(*t): %w", err)
	}

	(*t) = map[string]string{}

	for i, l := 0, 8192; i < l; i++ {
		var k string
		{
			sval, err := jr.ReadString(8192)
			if err != nil {
				return fmt.Errorf("k: %w", err)
			}
			k = string(sval)
		}
		if err := jr.ReadObjectColon(); err != nil {
			return fmt.Errorf("(*t): %w", err)
		}
		var v string
		{
			sval, err := jr.ReadString(8192)
			if err != nil {
				return fmt.Errorf("v: %w", err)
			}
			v = string(sval)
		}
		(*t)[k] = v
		close, err := jr.ReadObjectCloseOrComma()
		if err != nil {
			return fmt.Errorf("(*t): %w", err)
		}
		if close {
			break
		}
	}

	return nil
}

func (t *BigIntContainer) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("BigIntContainer: %w", err)
	}

	// t.Int (big.Int) (struct)
	if t.Int != nil && t.Int.Sign() < 0 {
		return fmt.Errorf("Value in field t.Int was a negative big-integer (not supported)")
	}
	if t.Int == nil {
		if err := jw.WriteUint8(0); err != nil {
			return fmt.Errorf("t.Int: %w", err)
		}
	} else {
		if err := jw.WriteBigInt(t.Int); err != nil {
			return fmt.Errorf("t.Int: %w", err)
		}
	}
	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("BigIntContainer: %w", err)
	}
	return nil
}

func (t *BigIntContainer) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = BigIntContainer{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("BigIntContainer: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("BigIntContainer: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("BigIntContainer: %w", err)
		}
	} else {

		// t.Int (big.Int) (struct)

		{
			nval, err := jr.ReadNumberAsBigInt(256)
			if err != nil {
				return fmt.Errorf("t.Int: %w", err)
			}
			t.Int = nval
		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("BigIntContainer: %w", err)
		}
	}
	return nil
}

func (t *TupleWithOptionalFields) MarshalDagJSON(w io.Writer) error {
	jw := jsg.NewDagJsonWriter(w)
	if t == nil {
		err := jw.WriteNull()
		return err
	}
	if err := jw.WriteArrayOpen(); err != nil {
		return fmt.Errorf("TupleWithOptionalFields: %w", err)
	}

	// t.Int1 (int64) (int64)

	if err := jw.WriteInt64(int64(t.Int1)); err != nil {
		return fmt.Errorf("t.Int1: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Uint2: %w", err)
	}

	// t.Uint2 (uint64) (uint64)

	if err := jw.WriteUint64(uint64(t.Uint2)); err != nil {
		return fmt.Errorf("t.Uint2: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Int3: %w", err)
	}

	// t.Int3 (int64) (int64)

	if err := jw.WriteInt64(int64(t.Int3)); err != nil {
		return fmt.Errorf("t.Int3: %w", err)
	}

	if err := jw.WriteComma(); err != nil {
		return fmt.Errorf("Int4: %w", err)
	}

	// t.Int4 (int64) (int64)

	if err := jw.WriteInt64(int64(t.Int4)); err != nil {
		return fmt.Errorf("t.Int4: %w", err)
	}

	if err := jw.WriteArrayClose(); err != nil {
		return fmt.Errorf("TupleWithOptionalFields: %w", err)
	}
	return nil
}

func (t *TupleWithOptionalFields) UnmarshalDagJSON(r io.Reader) (err error) {
	*t = TupleWithOptionalFields{}

	jr := jsg.NewDagJsonReader(r)
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()
	if err := jr.ReadArrayOpen(); err != nil {
		return fmt.Errorf("TupleWithOptionalFields: %w", err)
	}
	close, err := jr.PeekArrayClose()
	if err != nil {
		return fmt.Errorf("TupleWithOptionalFields: %w", err)
	}
	if close {
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("TupleWithOptionalFields: %w", err)
		}
	} else {

		// t.Int1 (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Int1: %w", err)
			}
			t.Int1 = int64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("TupleWithOptionalFields: %w", err)
			}
			if close {
				return fmt.Errorf("json input has too few fields 1 < 2")
			}
		}

		// t.Uint2 (uint64) (uint64)

		{

			nval, err := jr.ReadNumberAsUint64()
			if err != nil {
				return fmt.Errorf("t.Uint2: %w", err)
			}
			t.Uint2 = uint64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("TupleWithOptionalFields: %w", err)
			}
			if close {
				return nil
			}
		}

		// t.Int3 (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Int3: %w", err)
			}
			t.Int3 = int64(nval)

		}
		{
			close, err := jr.ReadArrayCloseOrComma()
			if err != nil {
				return fmt.Errorf("TupleWithOptionalFields: %w", err)
			}
			if close {
				return nil
			}
		}

		// t.Int4 (int64) (int64)

		{

			nval, err := jr.ReadNumberAsInt64()
			if err != nil {
				return fmt.Errorf("t.Int4: %w", err)
			}
			t.Int4 = int64(nval)

		}
		if err := jr.ReadArrayClose(); err != nil {
			return fmt.Errorf("TupleWithOptionalFields: %w", err)
		}
	}
	return nil
}
